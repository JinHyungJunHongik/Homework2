// Generated by view binder compiler. Do not edit!
package com.example.homework2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.homework2.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ModalSelectfoodBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnModalNegative;

  @NonNull
  public final Button btnModalPositive;

  @NonNull
  public final TextView modalFirm;

  @NonNull
  public final RecyclerView modalFoodList;

  @NonNull
  public final TextView modalTotalPrice;

  @NonNull
  public final TextView txModalTitle;

  private ModalSelectfoodBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnModalNegative, @NonNull Button btnModalPositive,
      @NonNull TextView modalFirm, @NonNull RecyclerView modalFoodList,
      @NonNull TextView modalTotalPrice, @NonNull TextView txModalTitle) {
    this.rootView = rootView;
    this.btnModalNegative = btnModalNegative;
    this.btnModalPositive = btnModalPositive;
    this.modalFirm = modalFirm;
    this.modalFoodList = modalFoodList;
    this.modalTotalPrice = modalTotalPrice;
    this.txModalTitle = txModalTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ModalSelectfoodBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ModalSelectfoodBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.modal_selectfood, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ModalSelectfoodBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_modalNegative;
      Button btnModalNegative = ViewBindings.findChildViewById(rootView, id);
      if (btnModalNegative == null) {
        break missingId;
      }

      id = R.id.btn_modalPositive;
      Button btnModalPositive = ViewBindings.findChildViewById(rootView, id);
      if (btnModalPositive == null) {
        break missingId;
      }

      id = R.id.modal_firm;
      TextView modalFirm = ViewBindings.findChildViewById(rootView, id);
      if (modalFirm == null) {
        break missingId;
      }

      id = R.id.modal_foodList;
      RecyclerView modalFoodList = ViewBindings.findChildViewById(rootView, id);
      if (modalFoodList == null) {
        break missingId;
      }

      id = R.id.modal_totalPrice;
      TextView modalTotalPrice = ViewBindings.findChildViewById(rootView, id);
      if (modalTotalPrice == null) {
        break missingId;
      }

      id = R.id.tx_modalTitle;
      TextView txModalTitle = ViewBindings.findChildViewById(rootView, id);
      if (txModalTitle == null) {
        break missingId;
      }

      return new ModalSelectfoodBinding((ConstraintLayout) rootView, btnModalNegative,
          btnModalPositive, modalFirm, modalFoodList, modalTotalPrice, txModalTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
